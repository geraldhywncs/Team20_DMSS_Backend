name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x" # Specify your desired Python version

      - name: Install dependencies
        run: |
          pip install -r ${{ github.workspace }}/requirement.txt

      - name: Install tesseract-ocr
        run: |
          sudo apt-get install -y tesseract-ocr

      - name: Run pytest
        id: pytest
        run: |
          pytest
        continue-on-error: true

      - name: Check pytest status
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Pytest failed. Please check the test results."
          exit 1

      - name: Build Docker image
        if: ${{ success() }}
        run: |
          docker build -t dmss_python_image -f Dockerfile.python .

      - name: Configure AWS CLI
        if: ${{ success() }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-southeast-2

      - name: Push Docker image to ECR
        if: ${{ success() }}
        run: |
          docker tag dmss_python_image:latest 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend:latest
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com
          docker push 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend:latest

      - name: Create SSH key file
        if: ${{ success() }}
        run: |
          ssh-keygen -t rsa -N "" -f my_key
          aws ec2-instance-connect send-ssh-public-key --region ap-southeast-2 --availability-zone  ap-southeast-2c --instance-id i-0248cc38c32d5b1a7 --instance-os-user ec2-user --ssh-public-key file://my_key.pub
          ssh-keygen -t rsa -N "" -f my_key_test
          aws ec2-instance-connect send-ssh-public-key --region ap-southeast-2 --availability-zone  ap-southeast-2b --instance-id i-0cf28d0737d84322d --instance-os-user ec2-user --ssh-public-key file://my_key_test.pub

      - name: SSH into EC2 instance and pull docker image to actual server
        if: ${{ success() }}
        run: |
          ssh -o StrictHostKeyChecking=no -i my_key ec2-user@ec2-3-26-203-126.ap-southeast-2.compute.amazonaws.com << EOF
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com
          docker pull 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend
          docker rm -f dmss_python_container || true && docker run -dÂ -e EC2=true --name dmss_python_container -p 5000:5000 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend
          EOF
          
      - name: SSH into EC2 instance and pull docker image to test server
        if: ${{ success() }}
        run: |
          ssh -o StrictHostKeyChecking=no -i my_key_test ec2-user@ec2-13-239-22-94.ap-southeast-2.compute.amazonaws.com << EOF
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com
          docker pull 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend
          docker rm -f dmss_python_container_test || true && docker run -d -e EC2_TEST=true --name dmss_python_container_test -p 5000:5000 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend
          EOF

      - name: Cleanup
        run: docker logout
